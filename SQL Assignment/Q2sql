SELECT * FROM DUBLIN_BIKES;

-- t-TEST INDEP
SELECT ROUND(STATS_T_TEST_INDEP(BANKING, BIKE_STANDS, 'STATISTIC', 'FALSE'), 5) t_observed_for_false, 
       ROUND(STATS_T_TEST_INDEP(BANKING, BIKE_STANDS, 'STATISTIC', 'TRUE'), 5) t_observed_for_true,
       ROUND(STATS_T_TEST_INDEP(BANKING, BIKE_STANDS), 5) two_sided_p_value
       FROM DUBLIN_BIKES;
      
-- ONE-WAY-ANOVA
SELECT BANKING,
       ROUND(STATS_ONE_WAY_ANOVA(AVAILABLE_BIKE_STANDS, AVAILABLE_BIKES, 'F_RATIO'), 5) f_ratio,
       ROUND(STATS_ONE_WAY_ANOVA(AVAILABLE_BIKE_STANDS, AVAILABLE_BIKES, 'SIG'), 10) p_value
       FROM DUBLIN_BIKES
       GROUP BY BANKING;
    
-- f-TEST
SELECT ROUND(VARIANCE(DECODE(BANKING, 'TRUE', BIKE_STANDS, null)), 5) var_BANKING_TRUE,
       ROUND(VARIANCE(DECODE(BANKING, 'FALSE', BIKE_STANDS, null)), 5) var_BANKING_FALSE,
       ROUND(STATS_F_TEST(BANKING, BIKE_STANDS, 'STATISTIC', 'TRUE'), 5) f_statistic_T,
       ROUND(STATS_F_TEST(BANKING, BIKE_STANDS, 'STATISTIC', 'FALSE'), 5) f_statistic_F,
       ROUND(STATS_F_TEST(BANKING, BIKE_STANDS), 5) two_sided_p_value
       FROM DUBLIN_BIKES;
  
-- Kolmogorov-Smirnov TEST
SELECT ROUND(STATS_KS_TEST(BANKING, AVAILABLE_BIKE_STANDS, 'STATISTIC'), 5) KS_STATISTIC_AVL_BK_STNDS,
       ROUND(STATS_KS_TEST(BANKING, AVAILABLE_BIKE_STANDS), 5) P_VALUE_AVL_BK_STNDS,
       ROUND(STATS_KS_TEST(BANKING, AVAILABLE_BIKES, 'STATISTIC'), 5) KS_STATISTIC_AVL_BKS,
       ROUND(STATS_KS_TEST(BANKING, AVAILABLE_BIKES), 5) P_VALUE_AVL_BKS
       FROM DUBLIN_BIKES;
  
-- Wilcoxon Signed Ranks TEST
SELECT BANKING,
       ROUND(STATS_WSR_TEST(BIKE_STANDS, AVAILABLE_BIKE_STANDS, 'STATISTIC'), 5) W_STATISTIC
       FROM DUBLIN_BIKES
       GROUP BY BANKING;

-- Mann Whitney TEST
SELECT 
       ROUND(STATS_MW_TEST(BANKING, BIKE_STANDS, 'STATISTIC'), 5) z_statistic,
       ROUND(STATS_MW_TEST(BANKING, BIKE_STANDS, 'ONE_SIDED_SIG', 'FALSE'), 5) one_sided_p_value
       FROM DUBLIN_BIKES;
       
-- STATS_MODE
SELECT BANKING, STATS_MODE(BIKE_STANDS) 
       FROM DUBLIN_BIKES
       GROUP BY BANKING
       ORDER BY stats_mode(BIKE_STANDS);
       
-- POPULATION AND SAMPLE COVARIANCE
SELECT 
       COVAR_POP(AVAILABLE_BIKE_STANDS, AVAILABLE_BIKES) AS CUM_COVP,
       ROUND(COVAR_SAMP(AVAILABLE_BIKE_STANDS, AVAILABLE_BIKES), 5) AS CUM_COVS 
  FROM DUBLIN_BIKES
  ORDER BY AVAILABLE_BIKE_STANDS, AVAILABLE_BIKES;